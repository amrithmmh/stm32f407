
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d94  08000d94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da0  08000da0  00010da8  2**0
                  CONTENTS
  4 .ARM          00000000  08000da0  08000da0  00010da8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da0  08000da8  00010da8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000da4  08000da4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010da8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000000  08000da8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08000da8  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010da8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ab0  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000564  00000000  00000000  00012888  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  00012df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00012f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000021a8  00000000  00000000  00013058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000195b  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000871a  00000000  00000000  00016b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000408  00000000  00000000  0001f2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d7c 	.word	0x08000d7c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d7c 	.word	0x08000d7c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI_pinConfig>:
//pb13 --> SCK
//pb12  --> NSS
//AF mode 5 from table alteranate functions

void SPI_pinConfig()
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af00      	add	r7, sp, #0
	GPIO_handle_t pSPI;
	pSPI.pGPIOx=GPIOB;
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <SPI_pinConfig+0x4c>)
 8000200:	607b      	str	r3, [r7, #4]

	pSPI.GPIO_PinConfig.GPIO_Mode=GPIO_MODE_AF;
 8000202:	2302      	movs	r3, #2
 8000204:	60fb      	str	r3, [r7, #12]
	pSPI.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 8000206:	2305      	movs	r3, #5
 8000208:	61fb      	str	r3, [r7, #28]
	pSPI.GPIO_PinConfig.GPIOx_PinOPType=GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	61bb      	str	r3, [r7, #24]
	pSPI.GPIO_PinConfig.GPIO_PinSpeed=GPIO_OP_SP_HIGH;
 800020e:	2302      	movs	r3, #2
 8000210:	613b      	str	r3, [r7, #16]
	pSPI.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
	//pSPI.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_14;
	//GPIO_Init(&pSPI);


	//MOSI
	pSPI.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_15;
 8000216:	230f      	movs	r3, #15
 8000218:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&pSPI);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fb6b 	bl	80008f8 <GPIO_Init>

	//NSS
	pSPI.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_12;
 8000222:	230c      	movs	r3, #12
 8000224:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&pSPI);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fb65 	bl	80008f8 <GPIO_Init>

	//SCLK
	pSPI.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 800022e:	230d      	movs	r3, #13
 8000230:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&pSPI);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fb5f 	bl	80008f8 <GPIO_Init>

}
 800023a:	bf00      	nop
 800023c:	3720      	adds	r7, #32
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <SPI2_Init>:


void SPI2_Init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	SPI_Handle_t pSPI2;
	pSPI2.pSPIx=SPI2;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <SPI2_Init+0x38>)
 8000250:	60fb      	str	r3, [r7, #12]
	pSPI2.SPI_Config.SPI_DeviceMode=SPI_MODE_MASTER;
 8000252:	2301      	movs	r3, #1
 8000254:	713b      	strb	r3, [r7, #4]
	pSPI2.SPI_Config.SPI_BusConfig=SPI_FULL_DUPLEX;
 8000256:	2301      	movs	r3, #1
 8000258:	717b      	strb	r3, [r7, #5]
	pSPI2.SPI_Config.SPI_SCLKSpeed=SPI_BAUD_DIV8;
 800025a:	2303      	movs	r3, #3
 800025c:	71bb      	strb	r3, [r7, #6]
	pSPI2.SPI_Config.SPI_DFF=SPI_DFF_8bit;
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]
	pSPI2.SPI_Config.SPI_CPOL=SPI_CPOL_LOW;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	pSPI2.SPI_Config.SPI_CPHA=SPI_CPHA_LOW;
 8000266:	2300      	movs	r3, #0
 8000268:	727b      	strb	r3, [r7, #9]
	pSPI2.SPI_Config.SPI_SSM=SPI_SSM_DI;
 800026a:	2300      	movs	r3, #0
 800026c:	72bb      	strb	r3, [r7, #10]
	SPI_Init(&pSPI2);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f96d 	bl	8000550 <SPI_Init>


}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40003800 	.word	0x40003800

08000284 <SPI_test>:

void SPI_test()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	; 0x50
 8000288:	af00      	add	r7, sp, #0

	char user_data[]="hello world";
 800028a:	4a3e      	ldr	r2, [pc, #248]	; (8000384 <SPI_test+0x100>)
 800028c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000290:	ca07      	ldmia	r2, {r0, r1, r2}
 8000292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_pinConfig();
 8000296:	f7ff ffaf 	bl	80001f8 <SPI_pinConfig>
	SPI2_Init();
 800029a:	f7ff ffd5 	bl	8000248 <SPI2_Init>

	GPIO_handle_t led;
		led.pGPIOx=GPIOD;
 800029e:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <SPI_test+0x104>)
 80002a0:	61fb      	str	r3, [r7, #28]
		led.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_12;
 80002a2:	230c      	movs	r3, #12
 80002a4:	623b      	str	r3, [r7, #32]
		led.GPIO_PinConfig.GPIO_Mode=GPIO_MODE_OUT;
 80002a6:	2301      	movs	r3, #1
 80002a8:	627b      	str	r3, [r7, #36]	; 0x24
		led.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80002aa:	2300      	movs	r3, #0
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		led.GPIO_PinConfig.GPIO_PinSpeed=GPIO_OP_SP_MED;
 80002ae:	2301      	movs	r3, #1
 80002b0:	62bb      	str	r3, [r7, #40]	; 0x28
		led.GPIO_PinConfig.GPIOx_PinOPType=GPIO_OP_TYPE_PP;
 80002b2:	2300      	movs	r3, #0
 80002b4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_PeriphCLKControl(led.pGPIOx,ENABLE);
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	2101      	movs	r1, #1
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fa30 	bl	8000720 <GPIO_PeriphCLKControl>
		GPIO_Init(&led);
 80002c0:	f107 031c 	add.w	r3, r7, #28
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fb17 	bl	80008f8 <GPIO_Init>

	GPIO_handle_t btn;
	btn.pGPIOx=GPIOA;
 80002ca:	4b30      	ldr	r3, [pc, #192]	; (800038c <SPI_test+0x108>)
 80002cc:	603b      	str	r3, [r7, #0]
	btn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
	btn.GPIO_PinConfig.GPIO_Mode=GPIO_MODE_IN;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
	btn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_OP_SP_MED;
 80002d6:	2301      	movs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
	btn.GPIO_PinConfig.GPIOx_PinOPType=GPIO_NO_PUPD;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
	GPIO_PeriphCLKControl(btn.pGPIOx, ENABLE);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fa1c 	bl	8000720 <GPIO_PeriphCLKControl>
	GPIO_Init(&btn);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fb04 	bl	80008f8 <GPIO_Init>

	SPI_RegDef_t *pSPI2=SPI2;
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SPI_test+0x10c>)
 80002f2:	647b      	str	r3, [r7, #68]	; 0x44
	SPI_SSIConf(pSPI2, ENABLE);
 80002f4:	2101      	movs	r1, #1
 80002f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80002f8:	f000 f9f6 	bl	80006e8 <SPI_SSIConf>



	while(1)
	{
		if(GPIO_ReadPin(btn.pGPIOx, 0))
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fca5 	bl	8000c50 <GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d034      	beq.n	8000376 <SPI_test+0xf2>
		{
			SPI_enable(pSPI2,ENABLE);
 800030c:	2101      	movs	r1, #1
 800030e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000310:	f000 f9ce 	bl	80006b0 <SPI_enable>
			SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 8000314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff65 	bl	80001e8 <strlen>
 800031e:	4602      	mov	r2, r0
 8000320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000324:	4619      	mov	r1, r3
 8000326:	481a      	ldr	r0, [pc, #104]	; (8000390 <SPI_test+0x10c>)
 8000328:	f000 f98a 	bl	8000640 <SPI_SendData>

			for(uint32_t i=0;i<1000000/2;i++);
 800032c:	2300      	movs	r3, #0
 800032e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000330:	e002      	b.n	8000338 <SPI_test+0xb4>
 8000332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000334:	3301      	adds	r3, #1
 8000336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <SPI_test+0x110>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d9f8      	bls.n	8000332 <SPI_test+0xae>
			GPIO_WritePin(led.pGPIOx, 12, SET);
 8000340:	69fb      	ldr	r3, [r7, #28]
 8000342:	2201      	movs	r2, #1
 8000344:	210c      	movs	r1, #12
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fc9a 	bl	8000c80 <GPIO_WritePin>
			for(uint32_t i=0;i<1000000/2;i++);
 800034c:	2300      	movs	r3, #0
 800034e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000350:	e002      	b.n	8000358 <SPI_test+0xd4>
 8000352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000354:	3301      	adds	r3, #1
 8000356:	64bb      	str	r3, [r7, #72]	; 0x48
 8000358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <SPI_test+0x110>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d9f8      	bls.n	8000352 <SPI_test+0xce>
			GPIO_WritePin(led.pGPIOx, 12, RESET);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	2200      	movs	r2, #0
 8000364:	210c      	movs	r1, #12
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fc8a 	bl	8000c80 <GPIO_WritePin>

			SPI_enable(pSPI2,DISABLE);
 800036c:	2100      	movs	r1, #0
 800036e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000370:	f000 f99e 	bl	80006b0 <SPI_enable>
 8000374:	e7c2      	b.n	80002fc <SPI_test+0x78>

		}
		else
		{
			GPIO_WritePin(led.pGPIOx, 12, RESET);
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	2200      	movs	r2, #0
 800037a:	210c      	movs	r1, #12
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc7f 	bl	8000c80 <GPIO_WritePin>
		if(GPIO_ReadPin(btn.pGPIOx, 0))
 8000382:	e7bb      	b.n	80002fc <SPI_test+0x78>
 8000384:	08000d94 	.word	0x08000d94
 8000388:	40020c00 	.word	0x40020c00
 800038c:	40020000 	.word	0x40020000
 8000390:	40003800 	.word	0x40003800
 8000394:	0007a11f 	.word	0x0007a11f

08000398 <EXTI0_IRQHandler>:

	}

}
void EXTI0_IRQHandler()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0

	GPIO_TogglePin(led.pGPIOx, 12);
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <EXTI0_IRQHandler+0x94>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	210c      	movs	r1, #12
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fc90 	bl	8000cca <GPIO_TogglePin>
	for(uint32_t i=0;i<200000;i++ );
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e002      	b.n	80003b6 <EXTI0_IRQHandler+0x1e>
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	3301      	adds	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	4a1d      	ldr	r2, [pc, #116]	; (8000430 <EXTI0_IRQHandler+0x98>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d9f8      	bls.n	80003b0 <EXTI0_IRQHandler+0x18>
	GPIO_TogglePin(led.pGPIOx, 12);
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <EXTI0_IRQHandler+0x94>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	210c      	movs	r1, #12
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fc80 	bl	8000cca <GPIO_TogglePin>
	for(uint32_t i=0;i<200000;i++ );
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	e002      	b.n	80003d6 <EXTI0_IRQHandler+0x3e>
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <EXTI0_IRQHandler+0x98>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d9f8      	bls.n	80003d0 <EXTI0_IRQHandler+0x38>
	GPIO_TogglePin(led.pGPIOx, 12);
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <EXTI0_IRQHandler+0x94>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	210c      	movs	r1, #12
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fc70 	bl	8000cca <GPIO_TogglePin>
	for(uint32_t i=0;i<200000;i++ );
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e002      	b.n	80003f6 <EXTI0_IRQHandler+0x5e>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3301      	adds	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <EXTI0_IRQHandler+0x98>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d9f8      	bls.n	80003f0 <EXTI0_IRQHandler+0x58>
	GPIO_TogglePin(led.pGPIOx, 12);
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <EXTI0_IRQHandler+0x94>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	210c      	movs	r1, #12
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fc60 	bl	8000cca <GPIO_TogglePin>
	for(uint32_t i=0;i<200000;i++ );
 800040a:	2300      	movs	r3, #0
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	e002      	b.n	8000416 <EXTI0_IRQHandler+0x7e>
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <EXTI0_IRQHandler+0x98>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d9f8      	bls.n	8000410 <EXTI0_IRQHandler+0x78>
	GPIO_IrqHandling(0);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fc68 	bl	8000cf4 <GPIO_IrqHandling>


}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000001c 	.word	0x2000001c
 8000430:	00030d3f 	.word	0x00030d3f

08000434 <main>:
#include <stdint.h>
#include "stm32f407xx.h"
#include "SPI_simple.h"

int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    /* Loop forever */

	SPI_test();
 8000438:	f7ff ff24 	bl	8000284 <SPI_test>
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 fc5f 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff ffdd 	bl	8000434 <main>

0800047a <LoopForever>:

LoopForever:
    b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000488:	08000da8 	.word	0x08000da8
  ldr r2, =_sbss
 800048c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000490:	20000054 	.word	0x20000054

08000494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <SPI_PeriphCLKControl>:
#include "stm32f407xx_SPI.h"
#include "stm32f407xx.h"


void SPI_PeriphCLKControl(SPI_RegDef_t *pSPIx,uint8_t EnDi ) //just enabling/disabling clock of gpio peripheral
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]
	if(EnDi==ENABLE)
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d120      	bne.n	80004ec <SPI_PeriphCLKControl+0x54>
	{

		if(pSPIx==SPI1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a24      	ldr	r2, [pc, #144]	; (8000540 <SPI_PeriphCLKControl+0xa8>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <SPI_PeriphCLKControl+0x28>
		{
			SPI1_CLK_EN();
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b6:	4a23      	ldr	r2, [pc, #140]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004bc:	6453      	str	r3, [r2, #68]	; 0x44
		{
				SPI3_CLK_DI();
	    }

	}
}
 80004be:	e038      	b.n	8000532 <SPI_PeriphCLKControl+0x9a>
		else if(pSPIx==SPI2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a21      	ldr	r2, [pc, #132]	; (8000548 <SPI_PeriphCLKControl+0xb0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <SPI_PeriphCLKControl+0x3e>
			SPI2_CLK_EN();
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004d4:	e02d      	b.n	8000532 <SPI_PeriphCLKControl+0x9a>
		else if(pSPIx==SPI3)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a1c      	ldr	r2, [pc, #112]	; (800054c <SPI_PeriphCLKControl+0xb4>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d129      	bne.n	8000532 <SPI_PeriphCLKControl+0x9a>
			SPI3_CLK_EN();
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e2:	4a18      	ldr	r2, [pc, #96]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004ea:	e022      	b.n	8000532 <SPI_PeriphCLKControl+0x9a>
	else if(EnDi==DISABLE)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d11f      	bne.n	8000532 <SPI_PeriphCLKControl+0x9a>
		if(pSPIx==SPI1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <SPI_PeriphCLKControl+0xa8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <SPI_PeriphCLKControl+0x70>
			   SPI1_CLK_DI();
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 80004fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 8000500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000504:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000506:	e014      	b.n	8000532 <SPI_PeriphCLKControl+0x9a>
		else if(pSPIx==SPI2)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <SPI_PeriphCLKControl+0xb0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <SPI_PeriphCLKControl+0x86>
				SPI2_CLK_DI();
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 8000516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800051c:	e009      	b.n	8000532 <SPI_PeriphCLKControl+0x9a>
		else if(pSPIx==SPI3)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <SPI_PeriphCLKControl+0xb4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d105      	bne.n	8000532 <SPI_PeriphCLKControl+0x9a>
				SPI3_CLK_DI();
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	4a06      	ldr	r2, [pc, #24]	; (8000544 <SPI_PeriphCLKControl+0xac>)
 800052c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000530:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40013000 	.word	0x40013000
 8000544:	40023800 	.word	0x40023800
 8000548:	40003800 	.word	0x40003800
 800054c:	40003c00 	.word	0x40003c00

08000550 <SPI_Init>:


void SPI_Init(SPI_Handle_t *pSPI_Handle)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]

	temp|=pSPI_Handle->SPI_Config.SPI_DeviceMode<<2; //master slave config
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4313      	orrs	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]

	if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_FULL_DUPLEX) //bus config
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d104      	bne.n	800057c <SPI_Init+0x2c>
	{
        temp&=~(1<<15);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e01a      	b.n	80005b2 <SPI_Init+0x62>

	}
	else if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_HALF_DUPLEX)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d107      	bne.n	8000594 <SPI_Init+0x44>
	{
		temp|=(pSPI_Handle->SPI_Config.SPI_BusConfig<<15);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	785b      	ldrb	r3, [r3, #1]
 8000588:	03db      	lsls	r3, r3, #15
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e00e      	b.n	80005b2 <SPI_Init+0x62>
	}
	else if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_SIMPLEX_RX_ONLY)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d10a      	bne.n	80005b2 <SPI_Init+0x62>
	{
		 temp&=~(1<<15);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005a2:	60fb      	str	r3, [r7, #12]
		temp|=(pSPI_Handle->SPI_Config.SPI_BusConfig<<10);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	029b      	lsls	r3, r3, #10
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
	}
//clk speed config
	temp|=pSPI_Handle->SPI_Config.SPI_SCLKSpeed<<3;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	461a      	mov	r2, r3
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4313      	orrs	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]

//DFF
	temp|=pSPI_Handle->SPI_Config.SPI_DFF<<11;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	02db      	lsls	r3, r3, #11
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]

//CPOL & CPHA
	temp|=pSPI_Handle->SPI_Config.SPI_CPOL<<1;//cpol
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	461a      	mov	r2, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
	temp|=pSPI_Handle->SPI_Config.SPI_CPHA<<0;//cpha
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	461a      	mov	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]


	pSPI_Handle->pSPIx->SPI_CR1=temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]
	SPI_RegDef_t *pSPIx;
	*(uint32_t *)0x40003800=28;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SPI_Init+0xbc>)
 80005f2:	221c      	movs	r2, #28
 80005f4:	601a      	str	r2, [r3, #0]


	SPI_PeriphCLKControl(pSPI_Handle->pSPIx, ENABLE);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	2101      	movs	r1, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff4b 	bl	8000498 <SPI_PeriphCLKControl>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40003800 	.word	0x40003800

08000610 <CheckStatusRegister>:

}


uint8_t CheckStatusRegister(SPI_RegDef_t *pSPIx,uint8_t regName)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	if(pSPIx->SPI_SR & (1<<regName))
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4013      	ands	r3, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <CheckStatusRegister+0x22>
		return (SET);
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <CheckStatusRegister+0x24>
	else
		return(RESET);
 8000632:	2300      	movs	r3, #0


}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t * ptxBuffer,uint32_t length)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]

	while(length>0)
 800064c:	e029      	b.n	80006a2 <SPI_SendData+0x62>
	{
		while(CheckStatusRegister(pSPIx,(1<<SPI_SR_TXE))==SET);//buffer not empty wait
 800064e:	bf00      	nop
 8000650:	2102      	movs	r1, #2
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f7ff ffdc 	bl	8000610 <CheckStatusRegister>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <SPI_SendData+0x10>

		if(pSPIx->SPI_CR1 & (1<<11))// 16 bit
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00e      	beq.n	8000688 <SPI_SendData+0x48>
		{

			pSPIx->SPI_DR= *((uint16_t *)ptxBuffer);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	60da      	str	r2, [r3, #12]
			ptxBuffer++;
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
			ptxBuffer++;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
			length-=2;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3b02      	subs	r3, #2
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	e00c      	b.n	80006a2 <SPI_SendData+0x62>

		}
		else
		{ //8bit

			pSPIx->SPI_DR|= *ptxBuffer;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	431a      	orrs	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	60da      	str	r2, [r3, #12]
			ptxBuffer++;
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3301      	adds	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
			length--;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
	while(length>0)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1d2      	bne.n	800064e <SPI_SendData+0xe>

		}
	}


}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SPI_enable>:

void SPI_enable(SPI_RegDef_t *pSPI_Handle,uint8_t ENorD)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]

	if(ENorD==ENABLE){ pSPI_Handle->SPI_CR1|=(1<<6);}
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d106      	bne.n	80006d0 <SPI_enable+0x20>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
	else
	{ pSPI_Handle->SPI_CR1 &=~(1<<6);}
}
 80006ce:	e005      	b.n	80006dc <SPI_enable+0x2c>
	{ pSPI_Handle->SPI_CR1 &=~(1<<6);}
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SPI_SSIConf>:

void SPI_SSIConf(SPI_RegDef_t *pSPI_Handle,uint8_t ENorD)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	if(ENorD==ENABLE){ pSPI_Handle->SPI_CR1|=(1<<8);}
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d106      	bne.n	8000708 <SPI_SSIConf+0x20>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
	else
	{ pSPI_Handle->SPI_CR1&=~(1<<8);}
}
 8000706:	e005      	b.n	8000714 <SPI_SSIConf+0x2c>
	{ pSPI_Handle->SPI_CR1&=~(1<<8);}
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <GPIO_PeriphCLKControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriphCLKControl(GPIO_RegDef_t *pGPIOx,uint8_t EnDi ) //just enabling/disabling clock of gpio peripheral
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
	if(EnDi==ENABLE)
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d162      	bne.n	80007f8 <GPIO_PeriphCLKControl+0xd8>
	{

		if(pGPIOx==GPIOA)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a66      	ldr	r2, [pc, #408]	; (80008d0 <GPIO_PeriphCLKControl+0x1b0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <GPIO_PeriphCLKControl+0x28>
		{
			GPIOA_CLK_EN();
 800073a:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a65      	ldr	r2, [pc, #404]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_CLK_DI();

		}
	}
}
 8000746:	e0bc      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOB)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a63      	ldr	r2, [pc, #396]	; (80008d8 <GPIO_PeriphCLKControl+0x1b8>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d106      	bne.n	800075e <GPIO_PeriphCLKControl+0x3e>
			GPIOB_CLK_EN();
 8000750:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a5f      	ldr	r2, [pc, #380]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800075c:	e0b1      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOC)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a5e      	ldr	r2, [pc, #376]	; (80008dc <GPIO_PeriphCLKControl+0x1bc>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <GPIO_PeriphCLKControl+0x54>
			GPIOC_CLK_EN();
 8000766:	4b5b      	ldr	r3, [pc, #364]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a5a      	ldr	r2, [pc, #360]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000772:	e0a6      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOD)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a5a      	ldr	r2, [pc, #360]	; (80008e0 <GPIO_PeriphCLKControl+0x1c0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <GPIO_PeriphCLKControl+0x6a>
			GPIOD_CLK_EN();
 800077c:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a54      	ldr	r2, [pc, #336]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000788:	e09b      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOE)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a55      	ldr	r2, [pc, #340]	; (80008e4 <GPIO_PeriphCLKControl+0x1c4>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <GPIO_PeriphCLKControl+0x80>
			GPIOE_CLK_EN();
 8000792:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a4f      	ldr	r2, [pc, #316]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800079e:	e090      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOF)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a51      	ldr	r2, [pc, #324]	; (80008e8 <GPIO_PeriphCLKControl+0x1c8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <GPIO_PeriphCLKControl+0x96>
			GPIOF_CLK_EN();
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b4:	e085      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOG)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a4c      	ldr	r2, [pc, #304]	; (80008ec <GPIO_PeriphCLKControl+0x1cc>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d106      	bne.n	80007cc <GPIO_PeriphCLKControl+0xac>
			GPIOG_CLK_EN();
 80007be:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ca:	e07a      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOH)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <GPIO_PeriphCLKControl+0x1d0>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <GPIO_PeriphCLKControl+0xc2>
			GPIOH_CLK_EN();
 80007d4:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a3e      	ldr	r2, [pc, #248]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e0:	e06f      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOI)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <GPIO_PeriphCLKControl+0x1d4>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d16b      	bne.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
			GPIOI_CLK_EN();
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a39      	ldr	r2, [pc, #228]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80007f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f6:	e064      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
	else if(EnDi==DISABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d161      	bne.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		if(pGPIOx==GPIOA)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a33      	ldr	r2, [pc, #204]	; (80008d0 <GPIO_PeriphCLKControl+0x1b0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <GPIO_PeriphCLKControl+0xf4>
			GPIOA_CLK_DI();
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000812:	e056      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOB)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a30      	ldr	r2, [pc, #192]	; (80008d8 <GPIO_PeriphCLKControl+0x1b8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <GPIO_PeriphCLKControl+0x10a>
			GPIOB_CLK_DI();
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000828:	e04b      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOC)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <GPIO_PeriphCLKControl+0x1bc>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <GPIO_PeriphCLKControl+0x120>
			GPIOC_CLK_DI();
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000838:	f023 0304 	bic.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083e:	e040      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOD)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <GPIO_PeriphCLKControl+0x1c0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d106      	bne.n	8000856 <GPIO_PeriphCLKControl+0x136>
			GPIOD_CLK_DI();
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800084e:	f023 0308 	bic.w	r3, r3, #8
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000854:	e035      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <GPIO_PeriphCLKControl+0x1c4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <GPIO_PeriphCLKControl+0x14c>
			GPIOE_CLK_DI();
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000864:	f023 0310 	bic.w	r3, r3, #16
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
}
 800086a:	e02a      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOF)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <GPIO_PeriphCLKControl+0x1c8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <GPIO_PeriphCLKControl+0x162>
			GPIOF_CLK_DI();
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800087a:	f023 0320 	bic.w	r3, r3, #32
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000880:	e01f      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOG)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <GPIO_PeriphCLKControl+0x1cc>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <GPIO_PeriphCLKControl+0x178>
			GPIOG_CLK_DI();
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 8000890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000896:	e014      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <GPIO_PeriphCLKControl+0x1d0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <GPIO_PeriphCLKControl+0x18e>
			GPIOH_CLK_DI();
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80008a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ac:	e009      	b.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
		else if(pGPIOx==GPIOI)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <GPIO_PeriphCLKControl+0x1d4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d105      	bne.n	80008c2 <GPIO_PeriphCLKControl+0x1a2>
			GPIOI_CLK_DI();
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <GPIO_PeriphCLKControl+0x1b4>)
 80008bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40021400 	.word	0x40021400
 80008ec:	40021800 	.word	0x40021800
 80008f0:	40021c00 	.word	0x40021c00
 80008f4:	40022000 	.word	0x40022000

080008f8 <GPIO_Init>:
 *
 * @Note              -  none
 */

void GPIO_Init(GPIO_handle_t *pGPIO_Handle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
	//1 . set mode (4 modes)
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_Mode<=2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d81f      	bhi.n	800094c <GPIO_Init+0x54>
	{
		temp=pGPIO_Handle->GPIO_PinConfig.GPIO_Mode<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER&=~(3<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2103      	movs	r1, #3
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER|=temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e0d4      	b.n	8000af6 <GPIO_Init+0x1fe>
	}
	else{

		//3 is analog mode
		//interrupts has to be programmed
		if(pGPIO_Handle->GPIO_PinConfig.GPIO_Mode>3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	2b03      	cmp	r3, #3
 8000952:	f240 80d0 	bls.w	8000af6 <GPIO_Init+0x1fe>
		{
			//interrupts
			if(pGPIO_Handle->GPIO_PinConfig.GPIO_Mode==4){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d116      	bne.n	800098c <GPIO_Init+0x94>

					//falling edge
				EXTI->EXTI_FTSR|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b4a      	ldr	r3, [pc, #296]	; (8000a88 <GPIO_Init+0x190>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6852      	ldr	r2, [r2, #4]
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <GPIO_Init+0x190>)
 8000970:	430b      	orrs	r3, r1
 8000972:	60d3      	str	r3, [r2, #12]
				EXTI->EXTI_RTSR &=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b44      	ldr	r3, [pc, #272]	; (8000a88 <GPIO_Init+0x190>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6852      	ldr	r2, [r2, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a40      	ldr	r2, [pc, #256]	; (8000a88 <GPIO_Init+0x190>)
 8000988:	400b      	ands	r3, r1
 800098a:	6093      	str	r3, [r2, #8]

			}
			if(pGPIO_Handle->GPIO_PinConfig.GPIO_Mode==5)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b05      	cmp	r3, #5
 8000992:	d116      	bne.n	80009c2 <GPIO_Init+0xca>
			{
					//rising edge
				EXTI->EXTI_RTSR|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <GPIO_Init+0x190>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	6852      	ldr	r2, [r2, #4]
 800099c:	2101      	movs	r1, #1
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a38      	ldr	r2, [pc, #224]	; (8000a88 <GPIO_Init+0x190>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6093      	str	r3, [r2, #8]
				EXTI->EXTI_FTSR&=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <GPIO_Init+0x190>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	6852      	ldr	r2, [r2, #4]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <GPIO_Init+0x190>)
 80009be:	400b      	ands	r3, r1
 80009c0:	60d3      	str	r3, [r2, #12]

			}
			if(pGPIO_Handle->GPIO_PinConfig.GPIO_Mode==6)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d115      	bne.n	80009f6 <GPIO_Init+0xfe>
			{
				//falling and rising edge
				EXTI->EXTI_FTSR|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80009ca:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <GPIO_Init+0x190>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	6852      	ldr	r2, [r2, #4]
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <GPIO_Init+0x190>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	60d3      	str	r3, [r2, #12]
				EXTI->EXTI_RTSR|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <GPIO_Init+0x190>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6852      	ldr	r2, [r2, #4]
 80009e8:	2101      	movs	r1, #1
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <GPIO_Init+0x190>)
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6093      	str	r3, [r2, #8]
			}



			//syscfg exticr registers
			uint8_t temp1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber%4; //0-15
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/4; //0-15 numbers
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	74bb      	strb	r3, [r7, #18]
			uint8_t value=GPIO_PIN_TO_CODE(pGPIO_Handle->pGPIOx);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <GPIO_Init+0x194>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d04d      	beq.n	8000ab0 <GPIO_Init+0x1b8>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <GPIO_Init+0x198>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d032      	beq.n	8000a84 <GPIO_Init+0x18c>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <GPIO_Init+0x19c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d02b      	beq.n	8000a80 <GPIO_Init+0x188>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <GPIO_Init+0x1a0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d024      	beq.n	8000a7c <GPIO_Init+0x184>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <GPIO_Init+0x1a4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d01d      	beq.n	8000a78 <GPIO_Init+0x180>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <GPIO_Init+0x1a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d016      	beq.n	8000a74 <GPIO_Init+0x17c>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <GPIO_Init+0x1ac>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00f      	beq.n	8000a70 <GPIO_Init+0x178>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <GPIO_Init+0x1b0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d008      	beq.n	8000a6c <GPIO_Init+0x174>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <GPIO_Init+0x1b4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d101      	bne.n	8000a68 <GPIO_Init+0x170>
 8000a64:	2308      	movs	r3, #8
 8000a66:	e024      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e022      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	e020      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a70:	2306      	movs	r3, #6
 8000a72:	e01e      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a74:	2305      	movs	r3, #5
 8000a76:	e01c      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a78:	2304      	movs	r3, #4
 8000a7a:	e01a      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e018      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a80:	2302      	movs	r3, #2
 8000a82:	e016      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e014      	b.n	8000ab2 <GPIO_Init+0x1ba>
 8000a88:	40013c00 	.word	0x40013c00
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40021400 	.word	0x40021400
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40021c00 	.word	0x40021c00
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	747b      	strb	r3, [r7, #17]
			SYSCFG->SYSCFG_EXTICR[temp2]|=(value<<temp1);
 8000ab4:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <GPIO_Init+0x34c>)
 8000ab6:	7cbb      	ldrb	r3, [r7, #18]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abe:	7c79      	ldrb	r1, [r7, #17]
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	495e      	ldr	r1, [pc, #376]	; (8000c44 <GPIO_Init+0x34c>)
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	4302      	orrs	r2, r0
 8000ace:	3302      	adds	r3, #2
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			SYSCFG_CLK_EN();
 8000ad4:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <GPIO_Init+0x350>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad8:	4a5b      	ldr	r2, [pc, #364]	; (8000c48 <GPIO_Init+0x350>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6453      	str	r3, [r2, #68]	; 0x44

            //exti IMR set
			EXTI->EXTI_IMR|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae0:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <GPIO_Init+0x354>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	6852      	ldr	r2, [r2, #4]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <GPIO_Init+0x354>)
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6013      	str	r3, [r2, #0]
		}

	}

	//2. output type
	temp=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIOx_PinOPType<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER&=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2101      	movs	r1, #1
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	400a      	ands	r2, r1
 8000b22:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER|=temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6859      	ldr	r1, [r3, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	605a      	str	r2, [r3, #4]

	//3. output speed
	temp=0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDR&=~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2103      	movs	r1, #3
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	400a      	ands	r2, r1
 8000b64:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR|=temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6899      	ldr	r1, [r3, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	609a      	str	r2, [r3, #8]

	//4. pullup pulldown
	temp=0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->PUPDR&=~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber*2));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2103      	movs	r1, #3
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR|=temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68d9      	ldr	r1, [r3, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	60da      	str	r2, [r3, #12]

	//5. alternate function settings

	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d036      	beq.n	8000c2e <GPIO_Init+0x336>
	{

	uint32_t temp1=0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
	uint32_t temp2=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
	temp1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	60fb      	str	r3, [r7, #12]
	temp2=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	60bb      	str	r3, [r7, #8]
	pGPIO_Handle->pGPIOx->AFR[temp1]&=~(16<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2)));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	3208      	adds	r2, #8
 8000be2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6999      	ldr	r1, [r3, #24]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4011      	ands	r1, r2
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3208      	adds	r2, #8
 8000c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO_Handle->pGPIOx->AFR[temp1]|=pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	3208      	adds	r2, #8
 8000c12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699a      	ldr	r2, [r3, #24]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4311      	orrs	r1, r2
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


	GPIO_PeriphCLKControl(pGPIO_Handle->pGPIOx, ENABLE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd73 	bl	8000720 <GPIO_PeriphCLKControl>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013800 	.word	0x40013800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <GPIO_ReadPin>:
 *
 * @Note              -  none
 */

uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx,uint8_t pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t value=0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	value=(pGPIOx->IDR >>pin & 0x00000001);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <GPIO_WritePin>:
 *
 * @return            -  uint16_t
 *
 * @Note              -  none
 */
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx,uint8_t pin, uint8_t value){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	70bb      	strb	r3, [r7, #2]

if(value==SET)
 8000c90:	78bb      	ldrb	r3, [r7, #2]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d109      	bne.n	8000caa <GPIO_WritePin+0x2a>
{
	pGPIOx->ODR|=(1<<pin);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	615a      	str	r2, [r3, #20]
else
{
	pGPIOx->ODR&=~(1<<pin);
}

}
 8000ca8:	e009      	b.n	8000cbe <GPIO_WritePin+0x3e>
	pGPIOx->ODR&=~(1<<pin);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	78fa      	ldrb	r2, [r7, #3]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	43d2      	mvns	r2, r2
 8000cb8:	401a      	ands	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	615a      	str	r2, [r3, #20]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <GPIO_TogglePin>:
 *
 * @return            -  uint16_t
 *
 * @Note              -  none
 */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t pin){
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70fb      	strb	r3, [r7, #3]
pGPIOx->ODR ^=(1<<pin);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	405a      	eors	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	615a      	str	r2, [r3, #20]

}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <GPIO_IrqHandling>:
	}
}


void GPIO_IrqHandling(uint8_t pinnumber)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	if(EXTI->EXTI_PR&(1<<pinnumber))
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <GPIO_IrqHandling+0x3c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d009      	beq.n	8000d24 <GPIO_IrqHandling+0x30>
	{
		EXTI->EXTI_PR|=(1<<pinnumber);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <GPIO_IrqHandling+0x3c>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <GPIO_IrqHandling+0x3c>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6153      	str	r3, [r2, #20]
	}
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40013c00 	.word	0x40013c00

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	4e0d      	ldr	r6, [pc, #52]	; (8000d6c <__libc_init_array+0x38>)
 8000d38:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3a:	1ba4      	subs	r4, r4, r6
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	2500      	movs	r5, #0
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	4e0b      	ldr	r6, [pc, #44]	; (8000d74 <__libc_init_array+0x40>)
 8000d46:	4c0c      	ldr	r4, [pc, #48]	; (8000d78 <__libc_init_array+0x44>)
 8000d48:	f000 f818 	bl	8000d7c <_init>
 8000d4c:	1ba4      	subs	r4, r4, r6
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	2500      	movs	r5, #0
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5c:	4798      	blx	r3
 8000d5e:	3501      	adds	r5, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d66:	4798      	blx	r3
 8000d68:	3501      	adds	r5, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08000da0 	.word	0x08000da0
 8000d70:	08000da0 	.word	0x08000da0
 8000d74:	08000da0 	.word	0x08000da0
 8000d78:	08000da4 	.word	0x08000da4

08000d7c <_init>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr

08000d88 <_fini>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr
